* Create a containerized application with s2i

  Before begin, fork the =DO180-apps= from 'RedHatTraining/DO180-apps', then
  clone the repository from github:

  #+begin_src sh
    su - student
    git clone https://github.com/GongCun/DO180-apps.git
    git branch -a
    git checkout s2i
  #+end_src

  Then do the checks:
  #+begin_example
    [student@workstation ~]$ lab openshift-s2i start
  #+end_example
  

Review the PHP source code of the application:
#+begin_example
  $ cd /home/student/DO180-apps/php-helloworld
  $ cat ./index.php
  <?php
  print "Hello, World! php version is " . PHP_VERSION . "\n";
  ?>
#+end_example

Prepare the lab environment:
#+begin_src sh
  source /usr/local/etc/ocp4.config
  oc login -u ${RHT_OCP4_DEV_USER} -p \
     ${RHT_OCP4_DEV_PASSWORD} ${RHT_OCP4_MASTER_API}
#+end_src

Create new PHP application using Source-to-Image from the *php-helloworld*
directory using the *s2i* branch:
#+begin_src sh
  oc get  is -n openshift | grep php
  oc new-app openshift/php~https://github.com/${RHT_OCP4_GITHUB_USER}/DO180-apps#s2i \
     --context-dir php-helloworld

  # Track the build progress
  oc logs -f bc/php-helloworld
  watch oc get pods -l app=php-helloworld
#+end_src

Add a route to test the application:
#+begin_src sh
  oc expose svc/php-helloworld --name php-helloworld
  oc get route
#+end_src

Test the application by access the URL by browsers.

Explore starting application builds by changing the application in its Git repository and
executing the proper commands to start a new Source-to-Image build.

#+begin_example
  $ cd ~/DO180-apps/php-helloworld
  $ wget Haruhi.jpg
  $ cat index.php
  <?php
  print "Hello, World!\n";
  print "<img src=\"./Haruhi.jpg\" alt=\"Haruhi\">";
  ?>

  $ git add ./Haruhi.jpg
  $ git commit -am"add Haruhi.jpg"
  $ git push -u origin s2i
#+end_example

Start a new Source-to-Image build process and wait for it to build and deploy:
#+begin_src sh
  oc start-build php-helloworld
  oc logs -f bc/php-helloworld
#+end_src

* Deploying containerized application on OpenShift 
Prepare the lab environment
#+begin_src sh
  source /usr/local/etc/ocp4.config

  oc login -u ${RHT_OCP4_DEV_USER} -p \
     ${RHT_OCP4_DEV_PASSWORD} ${RHT_OCP4_MASTER_API}

  oc new-project training

#+end_src


Download the docker images from rhscl
#+begin_src sh
  podman pull registry.access.redhat.com/rhscl/httpd-24-rhel7
  podman run -itd --name www-test-boc rhscl/httpd-24-rhel7:latest
#+end_src

Custom the images
#+begin_src sh
  mkdir -p ./www
  # Download the single page with picture from its.bocmacau.com
  wget -E -H -k -K -p  https://its.bocmacau.com/index.jsp
  chown -R 1001 ./its.bocmacau.com/

#+end_src

Copy the files/folders from local filesystem to the container
#+begin_src sh
  mnt=$(podman mount CONTAINERID)
  rsync -avn ./its.bocmacau.com/ ${mnt}/var/www/html/ # dry-run
  rsync -av ./its.bocmacau.com/ ${mnt}/var/www/html/  # run
  podman umount CONTAINERID
#+end_src

Change related files' permission
#+begin_src sh
  podman exec www-test-boc chown 777 /opt/rh/httpd24/root/etc/httpd/run/httpd.pid
  ...
#+end_src

Commit the container and upload to quay.io
#+begin_src sh
  podman commit www-test-boc httpd-24-rhel7:v6
  podman tag httpd-24-rhel7:v6 quay.io/gongcun/httpd-24-rhel7:v6
  podman push quay.io/gongcun/httpd-24-rhel7:v6
#+end_src

Create the new application by =oc=
#+begin_src sh
  oc new-app --docker-image=quay.io/gongcun/httpd-24-rhel7:v6 --name=myboc
  oc expose svc/myboc --name=boc
  oc get routes
#+end_src

Test the application by the URL.

* Deploying Multi-Container Applications

** =YAML= Basic Rules
- YAML files should end in =.yaml=.
- YAML is case sensitive.
- AML does not allow the use of tabs. Spaces are used instead as tabs are not
  universally supported.

All YAML files can optionally begin with =---= and end with =...=.

All members of a list are lines beginning at the save indentation level stating
with a ="- "= (a dash and a space):
#+begin_example
  ---
  # A list of tasty fruits
  - Apple
  - Orange
  - Strawberry
  - Mango
  ...

#+end_example

A dictionary is represented in a simple =key: value= form (the colon must be
followed by a space): 
#+begin_example
  # An employee record
  martin:
      name: Martin D'vloper
      job: Developer
      skill: Elite
#+end_example

Values can span multiple lines using =|= or =>=. Spanning multiple lines using a
“Literal Block Scalar” =|= will include the newlines and any trailing spaces.
Using a “Folded Block Scalar” =>= will fold newlines to spaces; it’s used to
make what would otherwise be a very long line easier to read and edit:
#+begin_example
  ---
  # An employee record
  name: Martin D'vloper
  job: Developer
  skill: Elite
  employed: True
  foods:
      - Apple
      - Orange
      - Strawberry
      - Mango
  languages:
      perl: Elite
      python: Elite
      pascal: Lame
  education: |
      4 GCSEs
      3 A-Levels
      BSc in the Internet of Things

#+end_example

** Examining the Skeleton of a Template
Assume you have an task list application named todo that requires an OpenShift
DeploymentConfig, Service, and Route object for deployment. You create a YAML
template definition file that defines attributes for these OpenShift resources,
along with definitions for any required parameters. Assuming the template is
defined in the todo-template.yaml file, use the oc create command to publish the
application template:
#+begin_example
oc create -f todo-template.yaml
#+end_example

** Parameters
Templates define a set of /parameters/, which are assigned values. OpenShift
resources defined in the template can get their configuration values by
referencing named parameters. Parameters in a template can have default values,
but they are optional. Any default value can be replaced when processing the
template.

Each parameter value can be set either explicitly by using the =oc process=
command, or generated by OpenShift according to the parameter configuration.

There are two ways to list available parameters from a template. The first one
is using the =oc describe= command:
#+BEGIN_SRC sh
  oc describe template mysql-persistent -n openshift
#+END_SRC

The second way is by using the *oc process* with the *--parameters* option:
#+BEGIN_SRC sh
  oc process --parameters mysql-persistent -n openshift
#+END_SRC

** Processing a Template Using the CLI
When you process a template, you generate a list of resources to create a new
application. To process a template, use the *oc process* command:
#+BEGIN_SRC sh
  oc process -f <filename>
#+END_SRC

The previous command processes a template file, and returns the list of
resources to stdout. The format of the output resource list is JSON. To output
the resource list in YAML format, use the *-o yaml* option:
#+BEGIN_SRC sh
  oc process -o yaml -f <filename>
#+END_SRC

Another option is to process a template from the current project of the
*openshift* project:
#+BEGIN_SRC sh
  oc process <uploaded-template-name>
#+END_SRC

Templates often generate resource with configurable attributes that are based on
the template parameters. To override a parameter, use the *-p* option followed
by a *<name>=<value>* pair:
#+BEGIN_SRC sh
  oc process -o yaml -f mysql.yaml \
     -p MYSQL_USER=dev -p MYSQL_PASSWORD=$P4SSD -p MYSQL_DATABASE=bank \
     -p VOLUME_CAPACITY=10Gi > mysqlProcessed.yaml
#+END_SRC

To create the application, use the generated YAML resource definition file:
#+BEGIN_SRC sh
  oc create -f mysqlProcessed.yaml
#+END_SRC

To use pipe:
#+BEGIN_EXAMPLE
  $ oc process -f mysql.yaml -p MYSQL_USER=dev \
  > -p MYSQL_PASSWORD=$P4SSD -p MYSQL_DATABASE=bank \
  > -p VOLUME_CAPACITY=10Gi | oc create -f -
#+END_EXAMPLE

To use a template in the openshift project to create an application in your
project, first export the template:

#+BEGIN_EXAMPLE
  $ oc get template mysql-persistent -o yaml \
  > -n openshift > mysql-persistent-template.yaml
#+END_EXAMPLE

Next, identify appropriate values for the template parameters and process the
template:

#+BEGIN_EXAMPLE
$ oc process -f mysql-persistent-template.yaml \
> -p MYSQL_USER=dev -p MYSQL_PASSWORD=$P4SSD -p MYSQL_DATABASE=bank \
> -p VOLUME_CAPACITY=10Gi | oc create -f -
#+END_EXAMPLE

*Note*: Regular user can't run following command directly:
#+begin_example
  $ oc process mysql-persistent -n openshift \
  > -p MYSQL_USER=dev -p MYSQL_PASSWORD=$P4SSD -p MYSQL_DATABASE=bank \
  > -p VOLUME_CAPACITY=10Gi | oc create -f -
  (Error: User can't create processedtemplates in project "openshift")
#+end_example

You can also use two slashes (//) to provide the namespace as part of the
template name:

#+BEGIN_EXAMPLE
$ oc process openshift//mysql-persistent \
> -p MYSQL_USER=dev -p MYSQL_PASSWORD=$P4SSD -p MYSQL_DATABASE=bank \
> -p VOLUME_CAPACITY=10Gi | oc create -f -
#+END_EXAMPLE


Alternatively, it is possible to create an application using the *oc new-app*
command passing the template name as the *--template* option argument:

#+BEGIN_EXAMPLE
  $ oc new-app --template=mysql-persistent \
  > -p MYSQL_USER=dev -p MYSQL_PASSWORD=$P4SSD -p MYSQL_DATABASE=bank \
  > -p VOLUME_CAPACITY=10Gi
#+END_EXAMPLE

** Creating an Application with a Template
1. Use the *Dockerfile* in the *images/mysql* subdirectory to build the database
   container. Publish the container image to quay.io with a tag of
   *do180-mysql-57-rhel7*.
   #+begin_example
     [student@workstation ~]$ cd ~/DO180/labs/multicontainer-openshift/images/mysql
     [student@workstation mysql]$ sudo podman build -t do180-mysql-57-rhel7 .
   #+end_example

   Push to quay.io
   #+begin_example
     [student@workstation mysql]$ source /usr/local/etc/ocp4.config
     [student@workstation mysql]$ sudo podman login quay.io -u ${RHT_OCP4_QUAY_USER}
     [student@workstation mysql]$ sudo podman tag \
     > do180-mysql-57-rhel7 quay.io/${RHT_OCP4_QUAY_USER}/do180-mysql-57-rhel7
     [student@workstation mysql]$ sudo podman push \
     > quay.io/${RHT_OCP4_QUAY_USER}/do180-mysql-57-rhel7
   #+end_example

2. Build the base image for the To Do List application using the Node.js
   Dockerfile, located in the exercise subdirectory *images/nodejs*. Tag the image
   as *do180-nodejs*. Do not publish this image to the registry.

   #+begin_example
     [student@workstation mysql]$ cd ~/DO180/labs/multicontainer-openshift
     [student@workstation multicontainer-openshift]$ cd images/nodejs
     [student@workstation nodejs]$ sudo podman build -t do180-nodejs .
   #+end_example

3. Build the =To Do List= application. Publish the application image to
   quay.io with an image tag of *do180-todonodejs*. The =dockerfile= content is
   as follow:
   #+begin_example
     FROM    do180-nodejs
     ARG NEXUS_BASE_URL
     MAINTAINER username <username@example.com>

     COPY run.sh build ${HOME}/
     RUN scl enable rh-nodejs8 'npm install --registry=http://$NEXUS_BASE_URL/repository/nodejs/'
     EXPOSE  30080

     CMD     ["scl","enable","rh-nodejs8","./run.sh"]

   #+end_example
   
   Run the following commands:
   #+begin_src sh
  cd ~/DO180/labs/multicontainer-openshift
  cd deploy/nodejs
  rm -fr build
  mkdir -p build
  cp -ap nodejs-source/* build
  rm build/*.sh
  cp -p db.js build/models
  chmod -R a+rwX build

  source /usr/local/etc/ocp4.config
  sudo podman build --layers=false -t do180/todonodejs \
       --build-arg NEXUS_BASE_URL=${RHT_OCP4_NEXUS_SERVER} .

#+end_src

   Push image to quay.io:
   #+begin_example
     [student@workstation nodejs]$ sudo podman tag do180/todonodejs \
     > quay.io/${RHT_OCP4_QUAY_USER}/do180-todonodejs
     [student@workstation nodejs]$ sudo podman push \
     > quay.io/${RHT_OCP4_QUAY_USER}/do180-todonodejs
   #+end_example

4. Create the =To Do List= application from the =YAML= template

   #+begin_example
     [student@workstation nodejs]$ oc login -u ${RHT_OCP4_DEV_USER} \
     > -p ${RHT_OCP4_DEV_PASSWORD} ${RHT_OCP4_MASTER_API}
   #+end_example

   Convert the format of template from JSON to YAML, change the template to use
   the temporary storage:

   #+begin_src diff
     --- todo-template.yaml.bk       2020-03-17 13:45:01.118722003 +0000
     +++ todo-template.yaml  2020-03-18 01:34:18.071591718 +0000
     @@ -39,11 +39,9 @@
              name: db-init
          volumes:
          - name: db-volume
     -      persistentVolumeClaim:
     -        claimName: dbclaim
     +      emptyDir: {}
          - name: db-init
     -      persistentVolumeClaim:
     -        claimName: dbinit
     +      emptyDir: {}
      - apiVersion: v1
        kind: Pod
        metadata:
     @@ -89,26 +87,6 @@
          - port: 3306
          selector:
            name: mysql
     -- kind: PersistentVolumeClaim
     -  apiVersion: v1
     -  metadata:
     -    name: dbinit
     -  spec:
     -    accessModes:
     -    - ReadWriteOnce
     -    resources:
     -      requests:
     -        storage: 1Mi
     -- kind: PersistentVolumeClaim
     -  apiVersion: v1
     -  metadata:
     -    name: dbclaim
     -  spec:
     -    accessModes:
     -    - ReadWriteOnce
     -    resources:
     -      requests:
     -        storage: 10Mi
      parameters:
      - description: Quay namespace the images are stored in
        name: RHT_OCP4_QUAY_USER

   #+end_src

   Create the new application
   #+begin_src sh
     oc new-project training-template

     oc process -f ./todo-template.yaml \
        -p RHT_OCP4_QUAY_USER=gongcun | oc create -f -

     oc expose svc/todoapi
   #+end_src

5. Test the application

   Use *curl* to test the REST API for the To Do List application.
   #+begin_src sh
     curl -w "\n" \
          http://todoapi-training-template.apps.ocp-ap3.prod.nextcle.com/todo/
   #+end_src

   Or use *links* to test the character browser
   #+begin_src sh
     links -dump \
           http://todoapi-training-template.apps.ocp-ap3.prod.nextcle.com/todo/
   #+end_src

   
   


   

